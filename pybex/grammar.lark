// number
SIGN: "+" | "-"
DIGIT: "0".."9"

UNSIGNED_INT: DIGIT ("_"? DIGIT)*
INT: SIGN? UNSIGNED_INT

_EXP: ("e"|"E") INT
DECIMAL: UNSIGNED_INT "." UNSIGNED_INT? | "." UNSIGNED_INT
UNSIGNED_FLOAT: UNSIGNED_INT _EXP | DECIMAL _EXP?
FLOAT: SIGN? UNSIGNED_FLOAT

// UNSIGNED_NUMBER: UNSIGNED_FLOAT | UNSIGNED_INT
// NUMBER: SIGN? UNSIGNED_NUMBER

// strings
NOT_ESCAPE: /(?<!\\)(\\\\)*?/

STRING: /"""/      /[\w\W]*?/ NOT_ESCAPE       /"""/
      | /'''/      /[\w\W]*?/ NOT_ESCAPE       /'''/
      | /(?!""")"/ /[^\n]*?/  NOT_ESCAPE /"(?<!""")/
      | /(?!''')'/ /[^\n]*?/  NOT_ESCAPE /'(?<!''')/

UNFINISHED_STRING: /"""[\w\W]*/ | /'''[\w\W]*/

// words
WORD: /\b\w+\b/

// funcalls
_FIRST_BRACKET: /(?<! )\(/  // to remove this from ast
_funcall: WORD _FIRST_BRACKET [expr ("," expr)*] ","? ")"  // _ because we need pretty ast

_unfinished_call: WORD _FIRST_BRACKET [expr ("," expr)*] ","?

// grouping (x) == x
// group: "(" expr ")"

expr: INT               -> int
    | FLOAT             -> float
    | STRING            -> string
    | UNFINISHED_STRING -> unfinished_string
    | _funcall          -> funcall
    | _unfinished_call  -> unfinished_call
    | WORD              -> word

single_input: expr?
exec_input: expr*

%import common (WS)

%ignore WS
%ignore /#[^\n]*/
